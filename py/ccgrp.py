#!/usr/bin/python

# vim: set tabstop=4 softtabstop=4 shiftwidth=4 : 

# This grogram produce a Capital Gain Report which generated by iBank. 

# add "Quantity","Open", "Cost", "Close", "Proceeds" columns to each
# stock summary line. and combine "S Gain" and "L Gain" to only "Gain"
# column to fit canadian tax report. 


import math
import argparse
import locale
import re
import sys
import codecs

bHasHeadLine = True

idxStockName = 0
idxQuantityColumn = 1
idxOpenColumn = 2
idxCostColumn = 3
idxCloseColumn = 4
idxProceedsColumn = 5
idxSGainColumn = 6
idxLGainColumn = 7
totalColumns = 8


argParser = argparse.ArgumentParser()
argParser.add_argument("srcfile", help="iBank produced capital gain report file", nargs='?')
argParser.add_argument("desfile", help="destination file", nargs='?') 
args = argParser.parse_args()


Heads = []
currStock = ""
records_of_eachstock = 0
cbTotalLines = 0

curr_account_name = ""
oneAccount = []
Accounts= []

def convertCurrencyToFloat(strCurrency):
	idxDollors = strCurrency.find('$');
	if (idxDollors != -1):
		strtemp = re.sub(r"[a-zA-Z]*\$","",strCurrency)
	else:
		strtemp = "0"
	locale.setlocale(locale.LC_ALL,"en_US")
	return locale.atof(strtemp)


def processOneStock (BankFile, currstock, accountname):
	aStock = []
	global cbTotalLines
	oneStockTotal = [None] * (totalColumns - 1)
	oneStockTotal[idxStockName] = currstock
	oneStockTotal[idxQuantityColumn] = 0
	oneStockTotal[idxOpenColumn] = u""
	oneStockTotal[idxCostColumn] = 0.0
	oneStockTotal[idxCloseColumn] = u""
	oneStockTotal[idxProceedsColumn] = 0.0
	oneStockTotal[idxSGainColumn] = 0.0
	
	for line in BankFile:
		cbTotalLines += 1
		listLine = line.strip().split('\t')
		if listLine[0] != currstock + u" (" + accountname + u") Total":
			listLine[idxCostColumn] = convertCurrencyToFloat(listLine[idxCostColumn])
			listLine[idxProceedsColumn] = convertCurrencyToFloat(listLine[idxProceedsColumn])
			listLine[idxSGainColumn] = convertCurrencyToFloat(listLine[idxSGainColumn])
			listLine[idxLGainColumn] = convertCurrencyToFloat(listLine[idxLGainColumn])
			listLine[idxSGainColumn] += listLine[idxLGainColumn]

			oneStockTotal[idxQuantityColumn] += int(listLine[idxQuantityColumn])
			if oneStockTotal[idxOpenColumn] == "":
				oneStockTotal[idxOpenColumn] = listLine[idxOpenColumn]
			elif oneStockTotal[idxOpenColumn] > listLine[idxOpenColumn]:
				oneStockTotal[idxOpenColumn] = listLine[idxOpenColumn]
			oneStockTotal[idxCostColumn] += listLine[idxCostColumn]
			if oneStockTotal[idxCloseColumn] == "":
				oneStockTotal[idxCloseColumn] = listLine[idxCloseColumn]
			elif oneStockTotal[idxCloseColumn] < listLine[idxCloseColumn]:
				oneStockTotal[idxCloseColumn] = listLine[idxCloseColumn]
			oneStockTotal[idxProceedsColumn] += listLine[idxProceedsColumn]
			oneStockTotal[idxSGainColumn] += listLine[idxSGainColumn]
			del listLine[-1]
			aStock.append(listLine)
		else:
			return aStock,oneStockTotal


def print_a_row(handle, row):
	for item in row[:-1]:
		if type(item) is float:
			handle.write(u"%.2f" % item)
		else:
			handle.write(unicode(item))
		handle.write(u",")
	else:
		if type(row[-1]) is float:
			handle.write(u"%.2f" % row[-1])
		else:
			handle.write(unicode(row[-1]))
		handle.write(u"\n")


#main start here


iBankFile = codecs.open(args.srcfile,encoding="utf-8", mode = "r") if args.srcfile else sys.stdin
outPutFile = codecs.open(args.desfile,encoding="utf-8",mode="w") if args.desfile else sys.stdout

for line in iBankFile:
	cbTotalLines += 1;
	listLine = line.strip().split(u'\t')
	if cbTotalLines == 1 and bHasHeadLine :
		Heads = listLine
		del Heads[idxLGainColumn]
		Heads[idxSGainColumn] = u"Gain"
		print_a_row(outPutFile,Heads)
		continue
	if len(listLine) == 1 :
		#currStock = listLine[0].replace(strAccountName,"").strip()
		m = re.search(u"\((.+)\)$",listLine[0].strip())
		if m !=None:
			currStock = listLine[0].replace(m.group(0),"").strip()
			curr_account_name = m.group(1)
		else:
			print >> outPutFile, "Error to get account name and stock name at line: %d" % (cbTotalLines)
			quit()
		aStock,oneStockTotal = processOneStock(iBankFile, currStock, curr_account_name)
		print_a_row(outPutFile, oneStockTotal)
		oneAccount.append(oneStockTotal)
	elif listLine[0] == u"Total":
		totals = []
		totals.append(u"Total")
		totals.append(u"")
		totals.append(u"")
		totals.append(sum(row[idxCostColumn] for row in Accounts))
		totals.append(u"")
		totals.append(sum(row[idxProceedsColumn] for row in Accounts))
		totals.append(sum(row[idxSGainColumn] for row in Accounts))
		#print "Meet Total line, Process will be ending."
		#print "Total process %d lines" % (cbTotalLines)
		print >>outPutFile,u"\n"
		print_a_row(outPutFile, totals)
	else:
		if not (curr_account_name in listLine[0] and "Total" in listLine[0]):
			print >>outPutFile,u"Error: Unknown format at line %d" % (cbTotalLines)
		else:
			one_account_total = [None] * (totalColumns - 1)
			one_account_total[idxStockName] = curr_account_name + u" Total"
			one_account_total[idxQuantityColumn] = u""
			one_account_total[idxOpenColumn] = u""
			one_account_total[idxCostColumn] = sum(row[idxCostColumn] for row in oneAccount)
			one_account_total[idxCloseColumn] = u""
			one_account_total[idxProceedsColumn] = sum(row[idxProceedsColumn] for row in oneAccount)
			one_account_total[idxSGainColumn] = sum(row[idxSGainColumn] for row in oneAccount)
			Accounts.append(one_account_total)
			print_a_row(outPutFile, one_account_total)
			del oneAccount[:]
			
			
if iBankFile is not sys.stdin:
	iBankFile.close()

if outPutFile is not sys.stdout:
	outPutFile.close()
